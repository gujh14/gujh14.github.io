<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>GNN on JH Gu&#39;s Tech Blog</title>
        <link>https://gujh14.github.io/tags/gnn/</link>
        <description>Recent content in GNN on JH Gu&#39;s Tech Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 15 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://gujh14.github.io/tags/gnn/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Neighborhood-aware Scalable Temporal Network Representation Learning</title>
        <link>https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/</link>
        <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/</guid>
        <description>&lt;img src="https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/thumbnail.png" alt="Featured image of post Neighborhood-aware Scalable Temporal Network Representation Learning" /&gt;&lt;p&gt;LoG, &amp;lsquo;22&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2209.01084&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;Neighborhood-aware Scalable Temporal Network Representation Learning&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There are few models to infer network-scientific properties on time-varying temporal network.&lt;/li&gt;
&lt;li&gt;Traditional GNNs cannot deal with structural features, and most of the existing works used distance between nodes on static networks.&lt;/li&gt;
&lt;li&gt;Authors proposed dictionary-type node representation and neighborhood cache as a scalable way to represent temporal networks, and achieved SOTA performance on many link prediction tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;temporal-network&#34;&gt;Temporal Network&lt;/h2&gt;
&lt;p&gt;Temporal network is an abstraction of complex interactive systems.&lt;/p&gt;
&lt;p&gt;Network structures evolve over time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples:
&lt;ul&gt;
&lt;li&gt;User-item network&lt;/li&gt;
&lt;li&gt;Social media network&lt;/li&gt;
&lt;li&gt;Email network&lt;/li&gt;
&lt;li&gt;Engineering control networks&lt;/li&gt;
&lt;li&gt;Mobility networks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Goal:&lt;/p&gt;
&lt;p&gt;Predicting how temporal networks evolve → link prediction in temporal networks&lt;/p&gt;
&lt;p&gt;Application:&lt;/p&gt;
&lt;p&gt;recommendation, anomaly detection, …&lt;/p&gt;
&lt;h2 id=&#34;temporal-networks-in-network-science&#34;&gt;Temporal networks in network science&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Network science: how network structures evolves reflects the fundamental laws of these complex systems
&lt;ul&gt;
&lt;li&gt;Triadic closure in social network: people with common friends tend to know each other.&lt;/li&gt;
&lt;li&gt;Feed-forward control in biological/engineering control systems: positive stimuli are followed with negative stimuli.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;issues-of-previous-approaches-effectiveness&#34;&gt;Issues of Previous Approaches (Effectiveness)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GNNs cannot capture structural features that involve multiple nodes of interest, such as triadic closure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled.png&#34;
	width=&#34;862&#34;
	height=&#34;444&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled_hu0af0c10cdb137a663b0f78c123bc4e21_292022_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled_hu0af0c10cdb137a663b0f78c123bc4e21_292022_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;At time step $t_3$, it is hard for traditional GNN to distinguish nodes $w$ and $v$, since their computation graphs are same.&lt;/p&gt;
&lt;p&gt;→ Temporal network representation learning, if following traditional GNN-type computation, will fail to learn such information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Works over static graph&lt;/p&gt;
&lt;p&gt;There were some works to deal with this issues on static graphs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEAL (Zhang et al. 2018)&lt;/li&gt;
&lt;li&gt;Distance encoding (Li et al. 2020)&lt;/li&gt;
&lt;li&gt;Labeling trick (Zhang et al. 2021)&lt;/li&gt;
&lt;li&gt;SUREL (Yin et al. 2022)&lt;/li&gt;
&lt;li&gt;ELPH (Chamberlain et al. 2022)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of the idea is to build structural feature (usually shortest path distance) and use it as extra feature.&lt;/p&gt;
&lt;p&gt;How can we apply this idea to temporal networks, in an efficient and scalable way?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recent work over temporal networks&lt;/p&gt;
&lt;p&gt;CAWN (Wang et al. 2021): but high computation overhead.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For each queried node pair, random walks need to be sampled.&lt;/li&gt;
&lt;li&gt;The relative positional encoding needs to be computed online.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;neighborhood-aware-temporal-network-nat&#34;&gt;Neighborhood Aware Temporal Network (NAT)&lt;/h2&gt;
&lt;p&gt;Key ideas&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dictionary-type node representations
&lt;ul&gt;
&lt;li&gt;Constructs structural feature efficiently&lt;/li&gt;
&lt;li&gt;Avoids online neighbor sampling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neighborhood Caches (N-caches)
&lt;ul&gt;
&lt;li&gt;Maintains dictionary representations with parallel hashing scalably&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dictionary-representations&#34;&gt;Dictionary representations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do not use long-vector representations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each node u is represented as a dictionary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keys: Down-sampled neighbors in 0-hop (self), 1-hop, 2-hop, …&lt;/li&gt;
&lt;li&gt;Values: Short vector representations (2~8 dim)
&lt;ul&gt;
&lt;li&gt;representation for node $a$ as a neighbor of node $u$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled2.png&#34;
	width=&#34;1872&#34;
	height=&#34;880&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled2_huade67fa509dc97d339187804f4125a21_1059953_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled2_huade67fa509dc97d339187804f4125a21_1059953_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;510px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;→ Captures joint neighborhood structural features between $u$ and $v$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled3.png&#34;
	width=&#34;2118&#34;
	height=&#34;1040&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled3_hu66849c16475129caf62098591160e14d_1210153_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled3_hu66849c16475129caf62098591160e14d_1210153_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;488px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;→ NAT combines structural feature construction and traditional vector representations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nat-architecture&#34;&gt;NAT architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Architecture
&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled4.png&#34;
	width=&#34;2492&#34;
	height=&#34;1133&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled4_hu37c1e302144fb2103f270f74417e8020_310888_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled4_hu37c1e302144fb2103f270f74417e8020_310888_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;219&#34;
		data-flex-basis=&#34;527px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Experiments
&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled5.png&#34;
	width=&#34;1800&#34;
	height=&#34;760&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled5_huc6510b21f6b038d5eeef0509f8d82bd4_443546_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled5_huc6510b21f6b038d5eeef0509f8d82bd4_443546_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;568px&#34;
	
&gt;
Performed on both inductive &amp;amp; transductive setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance
&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled6.png&#34;
	width=&#34;1948&#34;
	height=&#34;780&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled6_hu1244281417561286df41d8b587100bd3_1715747_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled6_hu1244281417561286df41d8b587100bd3_1715747_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;599px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computation &amp;amp; Scalability
&lt;img src=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled7.png&#34;
	width=&#34;1452&#34;
	height=&#34;996&#34;
	srcset=&#34;https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled7_hua5e9fd5770935b069b9c5fb370894ce1_814749_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/neighborhood-aware-scalable-temporal-network-representation-learning/imgs/Untitled7_hua5e9fd5770935b069b9c5fb370894ce1_814749_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;349px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structural features from a joint neighborhood of multiple nodes are crucial to predict temporal network evolution&lt;/li&gt;
&lt;li&gt;Dictionary-type representations can combine structural feature construction with traditional vector representations.&lt;/li&gt;
&lt;li&gt;Dictionary-type representations allow online construction of such structural features in an efficient way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2209.01084&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Neighborhood-aware Scalable Temporal Network Representation Learning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/live/wp5S9GHyAgw?feature=share&amp;amp;t=8409&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learning on Graphs Conference 2022 - Day 1 Livestream&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>A Generalist Neural Algorithmic Learner</title>
        <link>https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/</link>
        <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/</guid>
        <description>&lt;img src="https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/thumbnail.png" alt="Featured image of post A Generalist Neural Algorithmic Learner" /&gt;&lt;p&gt;LoG, 22 &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2209.11142&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;A Generalist Neural Algorithmic Learner&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Neural network, especially GNN, can learn traditional computer science algorithms in CLRS book.&lt;/li&gt;
&lt;li&gt;A generalist neural algorithmic learner is necessary if the algorithm is not obvious.&lt;/li&gt;
&lt;li&gt;Chunking mechanism was important to stabilize multi-task learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;starting-point-a-benchmark-to-train-neural-computer-scientists&#34;&gt;Starting point: A benchmark to train neural computer scientists&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2205.15659&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The CLRS Algorithmic Reasoning Benchmark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/deepmind/clrs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/deepmind/clrs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can we train a neural network to execute classical CS algorithms?&lt;/li&gt;
&lt;li&gt;A differentiable computer scientist could then apply its &amp;ldquo;knowledge&amp;rdquo; to natural inputs.&lt;/li&gt;
&lt;li&gt;We will also ponder: can it learn multiple algorithms at the same time?&lt;/li&gt;
&lt;li&gt;Typically the problem is modeled with a recurrent architecture:
&lt;ul&gt;
&lt;li&gt;LSTMs as in, e.g., Differentiable Neural Computers&lt;/li&gt;
&lt;li&gt;Transformers, as in the Universal Transformer&lt;/li&gt;
&lt;li&gt;ConvNets&lt;/li&gt;
&lt;li&gt;GNNs - our approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Introduction to Algorithms: CLRS&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled.png&#34;
	width=&#34;442&#34;
	height=&#34;500&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled_hua63265e8260ecb294a7579e9be70a8cf_138413_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled_hua63265e8260ecb294a7579e9be70a8cf_138413_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;212px&#34;
	
&gt;
&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled1.png&#34;
	width=&#34;1352&#34;
	height=&#34;2296&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled1_hucd8b39bbcea98e1dc70ae8292aef00b9_466801_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled1_hucd8b39bbcea98e1dc70ae8292aef00b9_466801_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;List of algorithms included in the benchmark&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;58&#34;
		data-flex-basis=&#34;141px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Representation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All algorithms have been boiled down to a common graph representation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each algorithm is specified by a fixed number of &amp;ldquo;probes&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, the spec of insertion sort consists of the following 6 probes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;pos&#39;: (Stage. INPUT, Location.NODE, Type.SCALAR)&lt;/code&gt; → the id of each node&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;key&#39;: (Stage.INPUT, Location. NODE, Type.SCALAR)&lt;/code&gt; → the values to sort&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;pred&#39;: (Stage.OUTPUT, Location. NODE, Type.POINTER)&lt;/code&gt; → the final node order&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;pred h&#39;: (Stage. HINT, Location. NODE, Type. POINTER)&lt;/code&gt; → the node order along execution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;i&#39;: (Stage.HINT, Location.NODE, Type.MASK_ONE)&lt;/code&gt; → index for insertion&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;j&#39;: (Stage.HINT, Location.NODE, Type.MASK_ONE)&lt;/code&gt; → index tracking &amp;ldquo;sorted up to&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A probe can be input, output or hint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The inputs and outputs are fixed during algorithm execution, the hints change during execution&lt;/p&gt;
&lt;p&gt;→ they specify the algorithm (e.g., all sorting algorithms have the same inputs and outputs, differing only in their hints).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;representation-encoding&#34;&gt;Representation: Encoding&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled2.png&#34;
	width=&#34;1890&#34;
	height=&#34;978&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled2_hu7e853881e8b757dd1a85a210730154a4_566098_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled2_hu7e853881e8b757dd1a85a210730154a4_566098_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;193&#34;
		data-flex-basis=&#34;463px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pos&lt;/code&gt;: Positional ID (ID of node) is encoded as vector by encoder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled3.png&#34;
	width=&#34;1876&#34;
	height=&#34;966&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled3_hu7baf8378b39f5fa240e98e584947107a_603402_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled3_hu7baf8378b39f5fa240e98e584947107a_603402_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;466px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key&lt;/code&gt;: The value to be processed is also encoded as vector and added to &lt;code&gt;pos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled4.png&#34;
	width=&#34;1890&#34;
	height=&#34;974&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled4_hucd1cc34f62c703accc3d07c639180e51_633524_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled4_hucd1cc34f62c703accc3d07c639180e51_633524_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pred_h&lt;/code&gt;: pointer used as hint is encoded and used as edge embedding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled5.png&#34;
	width=&#34;1886&#34;
	height=&#34;988&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled5_huaaecf81d46faf81870899897fc493e3b_810218_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled5_huaaecf81d46faf81870899897fc493e3b_810218_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;190&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;: index needed for insertion are also added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled6.png&#34;
	width=&#34;1408&#34;
	height=&#34;872&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled6_hue476ddce194debfa21fdc58a72e3d857_332819_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled6_hue476ddce194debfa21fdc58a72e3d857_332819_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled7.png&#34;
	width=&#34;1420&#34;
	height=&#34;832&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled7_hua63bee05ca500a02321ab8fba0e28fac_373127_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled7_hua63bee05ca500a02321ab8fba0e28fac_373127_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;409px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled8.png&#34;
	width=&#34;1388&#34;
	height=&#34;838&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled8_hu182e9048a4d33125a9f3cad1eff4208e_440343_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled8_hu182e9048a4d33125a9f3cad1eff4208e_440343_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;397px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;representation-decoding&#34;&gt;Representation: Decoding&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled9.png&#34;
	width=&#34;2160&#34;
	height=&#34;1006&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled9_hu1c5ed84ce779c0009f05f3a5c7d8805a_1301394_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled9_hu1c5ed84ce779c0009f05f3a5c7d8805a_1301394_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;515px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Processing step is agnostic to the algorithm. Processing parameter is shared.&lt;/p&gt;
&lt;h2 id=&#34;training&#34;&gt;Training&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled10.png&#34;
	width=&#34;1910&#34;
	height=&#34;1120&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled10_hu780304005a57f8d4da75acf6761a1447_1221193_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled10_hu780304005a57f8d4da75acf6761a1447_1221193_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;409px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Hint: used only when training (not testing)&lt;/p&gt;
&lt;p&gt;When training, hint loss is also added along with output loss.&lt;/p&gt;
&lt;h2 id=&#34;details&#34;&gt;Details&lt;/h2&gt;
&lt;p&gt;Trained on unlimited samples of size (number of nodes) &amp;lt; 16&lt;/p&gt;
&lt;p&gt;The training distribution doesn&amp;rsquo;t cover all possible inputs though (e.g., we use only
Erdös-Rényi graphs)&lt;/p&gt;
&lt;p&gt;Tested on samples of size 64.&lt;/p&gt;
&lt;p&gt;The length of the trajectory is given → both at train &amp;amp; test time.&lt;/p&gt;
&lt;p&gt;Early stopping based on in-distribution scores.&lt;/p&gt;
&lt;h2 id=&#34;but-why-even-care-about-building-a-generalist&#34;&gt;But.. why even care about building a generalist?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled11.png&#34;
	width=&#34;1788&#34;
	height=&#34;920&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled11_hud75bfcc42b7bb40e9cc645bc00eace8d_751629_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled11_hud75bfcc42b7bb40e9cc645bc00eace8d_751629_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;466px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;→ It is all about problem solving!&lt;/p&gt;
&lt;p&gt;How do we solve problems?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example: Route recommendation&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled12.png&#34;
	width=&#34;2190&#34;
	height=&#34;1214&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled12_hu7e6e9af231f964be6a6ec86c54c77193_1572950_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled12_hu7e6e9af231f964be6a6ec86c54c77193_1572950_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;details-1&#34;&gt;Details&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled13.png&#34;
	width=&#34;1136&#34;
	height=&#34;572&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled13_hue16f66050313a9e43df5d697661818d7_432973_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled13_hue16f66050313a9e43df5d697661818d7_432973_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;With Neural Algorithmic Reasoning, we break the &lt;strong&gt;blue&lt;/strong&gt; bottleneck!&lt;/p&gt;
&lt;p&gt;A generalist processor would break the &lt;strong&gt;red&lt;/strong&gt; one!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the model have a shared latent space where all the &amp;ldquo;key&amp;rdquo; algorithms would be executed&amp;hellip;&lt;/li&gt;
&lt;li&gt;No longer need to decide upfront which algorithm to use!&lt;/li&gt;
&lt;li&gt;The algorithm (combo) can be softly selected, learned by backprop through the encoder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;to-get-a-generalist-first-we-need-a-good-specialist&#34;&gt;To get a generalist, first we need a good specialist&lt;/h2&gt;
&lt;p&gt;However, training a generalist is not as easy as simple training over all 30 algos in CLRS-30!&lt;/p&gt;
&lt;p&gt;Initial runs of this kind led to NaNs.&lt;/p&gt;
&lt;p&gt;Prior results, e.g. NE++ (Xhonneux et al., NeurIPS&#39;21) imply this can be successful only if the algorithms being learnt together are highly related (e.g. Prim + Dijkstra)..&lt;/p&gt;
&lt;p&gt;Key limitation:&lt;/p&gt;
&lt;p&gt;Tasks with high learning instabilities cause breakages for all other.&lt;/p&gt;
&lt;p&gt;→ Set out to improve single-task stability first!&lt;/p&gt;
&lt;h3 id=&#34;bucket-list-of-improvements&#34;&gt;Bucket list of improvements&lt;/h3&gt;
&lt;p&gt;Key improvements include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removing teacher forcing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Training data augmentation (e.g. sampling multiple sizes below 16)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soft hint propagation (e.g. do not apply $\argmax$ to the hints; compute $\text{softmax}$ instead)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static hint elimination (if a hint provably never changes, convert it to an input)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encoder initialization (Xavier) + gradient clipping&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Randomized positional embeddings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Permutation decoders using the Sinkhorn operator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gating mechanisms in the processor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Triplet reasoning&lt;/p&gt;
&lt;p&gt;$t_{ijk} = \psi_t (h_i, h_j, h_k, e_{ij}, e_{ik}, e_{kj}, g)$&lt;/p&gt;
&lt;p&gt;$h_{ij} = \phi_t(\max_k t_{ijk})$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled14.png&#34;
	width=&#34;1870&#34;
	height=&#34;888&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled14_huf219c2988f878053e5a1b857a2f9f297_1096341_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled14_huf219c2988f878053e5a1b857a2f9f297_1096341_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;final-step-to-the-generalist-chunking&#34;&gt;Final step to the generalist: Chunking&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;chunking mechanism&lt;/strong&gt; was important for multi-task learning!&lt;/p&gt;
&lt;p&gt;This not only helps protect against OOM issues, it also improves learning stability!&lt;/p&gt;
&lt;p&gt;The idea is conceptually simple (though tricky to implement)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The length of the trajectory is set to 16.&lt;/li&gt;
&lt;li&gt;Shorter samples are not padded, but concatenated by next sample.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;i.e. if trajectory doesn&amp;rsquo;t fully fit in the chunk, this is OK-can restart from a midpoint hint.&lt;/p&gt;
&lt;p&gt;Initialization of the hidden state should not matter, since CLRS-30 tasks are Markovian!&lt;/p&gt;
&lt;h3 id=&#34;single-generalist-that-matches-the-thirty-specialists&#34;&gt;Single generalist that matches the thirty specialists&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled15.png&#34;
	width=&#34;2232&#34;
	height=&#34;730&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled15_hu1f7b1e05436ecf853aeb420a00a1cb90_1553889_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled15_hu1f7b1e05436ecf853aeb420a00a1cb90_1553889_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;chunking-helps-significantly&#34;&gt;Chunking helps significantly&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled16.png&#34;
	width=&#34;2196&#34;
	height=&#34;818&#34;
	srcset=&#34;https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled16_hue2c0561d8ac9d7e91097433a7ef8d5ad_959613_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/a-generalist-neural-algorithmic-learner/imgs/Untitled16_hue2c0561d8ac9d7e91097433a7ef8d5ad_959613_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/live/wp5S9GHyAgw?feature=share&amp;amp;t=10170&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learning on Graphs Conference 2022 - Day 1 Livestream&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2209.11142&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A Generalist Neural Algorithmic Learner&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Does GNN Pre-training Help Molecular Representation?</title>
        <link>https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/</link>
        <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/</guid>
        <description>&lt;img src="https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/thumbnail.png" alt="Featured image of post Does GNN Pre-training Help Molecular Representation?" /&gt;&lt;p&gt;NeurIPS, &amp;lsquo;22&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2207.06010&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Does GNN Pre-training Help Molecular Representation?&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Self-supervised pre-training alone &lt;strong&gt;does not&lt;/strong&gt; provide statistically significant improvements over non-pre-trained methods on downstream tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data splits, hand-crafted rich features, or hyperparameters&lt;/strong&gt; can bring significant improvements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;preliminaries&#34;&gt;Preliminaries&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled.png&#34;
	width=&#34;1722&#34;
	height=&#34;582&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled_hu2522057aecca1aa237485e0d3503f9e7_141482_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled_hu2522057aecca1aa237485e0d3503f9e7_141482_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Image 1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;295&#34;
		data-flex-basis=&#34;710px&#34;
	
&gt;
Pre-train objectives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-supervised
&lt;ul&gt;
&lt;li&gt;Node prediction&lt;/li&gt;
&lt;li&gt;Context prediction&lt;/li&gt;
&lt;li&gt;Motif prediction&lt;/li&gt;
&lt;li&gt;Contrastive learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supervised
&lt;ul&gt;
&lt;li&gt;Related tasks with label (e.g. ChEMBL dataset)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Graph features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic
Feature set used in &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/1905.12265&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hu et al.&lt;/a&gt;&lt;br&gt;
&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled1.png&#34;
	width=&#34;1694&#34;
	height=&#34;508&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled1_hu88729ad961e3498c17ab82c4660c440e_117274_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled1_hu88729ad961e3498c17ab82c4660c440e_117274_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Image 1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;333&#34;
		data-flex-basis=&#34;800px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rich&lt;/p&gt;
&lt;p&gt;Feature set used in &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2007.02835&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rong et al.&lt;/a&gt; This is the superset of basic features.
&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled2.png&#34;
	width=&#34;1338&#34;
	height=&#34;1076&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled2_hub6d6462cb2f07779a844e0b6f42f690b_168013_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled2_hub6d6462cb2f07779a844e0b6f42f690b_168013_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Image 1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;298px&#34;
	
&gt;
In downstream tasks, additional 2d normalized &lt;code&gt;rdNormalizedDescriptors&lt;/code&gt; are used (not in pre-training).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Downstream splits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scaffold&lt;/p&gt;
&lt;p&gt;Sorts the molecule according to the scaffold, then partition the sorted list into train/valid/test splits. → Deterministic&lt;/p&gt;
&lt;p&gt;Molecules of each set are most different ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Balanced scaffold&lt;/p&gt;
&lt;p&gt;Introduces the randomness in the sorting and splitting stages of Scaffold split.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GNN architecture&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GIN&lt;/li&gt;
&lt;li&gt;GraphSAGE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pre-train dataset&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ZINC15 (self-supervised)&lt;/p&gt;
&lt;p&gt;2 million molecules. Pre-processed following Hu et al.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAVI (self-supervised)&lt;/p&gt;
&lt;p&gt;1 billion drug-like molecules synthesized by computer simulated reactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ChEMBL (supervised)&lt;/p&gt;
&lt;p&gt;500k drugable molecules with 1,310 prediction target labels from bio-activity assays.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled3.png&#34;
	width=&#34;1696&#34;
	height=&#34;402&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled3_hu23dfaf19760eb9198a64586f6e9e538d_129521_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled3_hu23dfaf19760eb9198a64586f6e9e538d_129521_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;421&#34;
		data-flex-basis=&#34;1012px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled4.png&#34;
	width=&#34;1694&#34;
	height=&#34;306&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled4_hub456f2da350b268e245cd11a5535bf94_107470_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled4_hub456f2da350b268e245cd11a5535bf94_107470_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;553&#34;
		data-flex-basis=&#34;1328px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled5.png&#34;
	width=&#34;1690&#34;
	height=&#34;390&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled5_hu2c1b41f4be72da8a39843fe8bece40ca_127650_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled5_hu2c1b41f4be72da8a39843fe8bece40ca_127650_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;433&#34;
		data-flex-basis=&#34;1040px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled6.png&#34;
	width=&#34;1712&#34;
	height=&#34;308&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled6_hu9e3333a7416211da0979291a20928457_104323_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled6_hu9e3333a7416211da0979291a20928457_104323_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;555&#34;
		data-flex-basis=&#34;1334px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled7.png&#34;
	width=&#34;1700&#34;
	height=&#34;326&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled7_hufd2c8cd9ddab44b099368583aeb3c4b4_98592_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled7_hufd2c8cd9ddab44b099368583aeb3c4b4_98592_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;521&#34;
		data-flex-basis=&#34;1251px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled8.png&#34;
	width=&#34;1702&#34;
	height=&#34;316&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled8_hue724faf0b9e1050d8cd4ed3ab8021048_107066_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled8_hue724faf0b9e1050d8cd4ed3ab8021048_107066_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;538&#34;
		data-flex-basis=&#34;1292px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled9.png&#34;
	width=&#34;1710&#34;
	height=&#34;324&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled9_hu3469e656073a5e47d18db581b35e22f4_102002_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled9_hu3469e656073a5e47d18db581b35e22f4_102002_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;527&#34;
		data-flex-basis=&#34;1266px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled10.png&#34;
	width=&#34;1696&#34;
	height=&#34;328&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled10_hu3e2f5f911381baac558177a0aa61cd89_114788_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled10_hu3e2f5f911381baac558177a0aa61cd89_114788_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;517&#34;
		data-flex-basis=&#34;1240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled11.png&#34;
	width=&#34;1698&#34;
	height=&#34;358&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled11_hucbfacb23d6af299525c858ef04d38582_129938_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled11_hucbfacb23d6af299525c858ef04d38582_129938_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;474&#34;
		data-flex-basis=&#34;1138px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled12.png&#34;
	width=&#34;1704&#34;
	height=&#34;368&#34;
	srcset=&#34;https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled12_hu98ddd8342e269d06b326bfdd4dd2ec69_121600_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/does-gnn-pre-training-help-molecular-representation/Untitled12_hu98ddd8342e269d06b326bfdd4dd2ec69_121600_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;463&#34;
		data-flex-basis=&#34;1111px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;key-takeaways&#34;&gt;Key Takeaways&lt;/h2&gt;
&lt;h3 id=&#34;when-pre-training-might-help&#34;&gt;When pre-training might help?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Related &lt;strong&gt;supervised&lt;/strong&gt; pre-training dataset. But not always feasible.&lt;/li&gt;
&lt;li&gt;If the rich features are absent.&lt;/li&gt;
&lt;li&gt;If the downstream split distributions are substantially different.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;when-the-gain-dimishes&#34;&gt;When the gain dimishes?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;If using rich features.&lt;/li&gt;
&lt;li&gt;If don’t have the highly relevant supervisions.&lt;/li&gt;
&lt;li&gt;If the downstream split is balanced.&lt;/li&gt;
&lt;li&gt;If the self-supervised learning dataset lacks diversity.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;why-pre-training-may-not-help-in-some-cases&#34;&gt;Why pre-training may not help in some cases?&lt;/h3&gt;
&lt;p&gt;Some of the pre-training methods (e.g. node label prediction) might be too easy&lt;br&gt;
→ Transfer less knowledge.&lt;/p&gt;
&lt;p&gt;So…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use rich features&lt;/li&gt;
&lt;li&gt;Use balanced scaffold&lt;/li&gt;
&lt;li&gt;Use related supervised pre-training dataset&lt;/li&gt;
&lt;li&gt;Use difficult pre-training task (for self-supervised pre-training) and use high-quality negative samples.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Few-shot Learning with Graph Neural Networks</title>
        <link>https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/</link>
        <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/</guid>
        <description>&lt;img src="https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/thumbnail.png" alt="Featured image of post Few-shot Learning with Graph Neural Networks" /&gt;&lt;p&gt;ICLR, &amp;lsquo;17,&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/1711.04043&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Few-Shot Learning with Graph Neural Networks&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Used similarity value between samples for few shot learning.&lt;/li&gt;
&lt;li&gt;Regard each sample as nodes, and similarity kernel as edges.&lt;/li&gt;
&lt;li&gt;Similarity kernel is trainable. (i.e. Not just simple inner product)&lt;/li&gt;
&lt;li&gt;Can be applied to semi-supervised learning and active learning.&lt;/li&gt;
&lt;li&gt;State-of-the-art performance in Omniglot and Mini-ImageNet in 2017.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keywords&#34;&gt;Keywords&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Few shot learning&lt;/li&gt;
&lt;li&gt;Graph neural network&lt;/li&gt;
&lt;li&gt;Semi-supervised learning&lt;/li&gt;
&lt;li&gt;Active learning with Attention&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supervised end-to-end learning has been extremely successful in computer vision, speech, or machine translation tasks.&lt;/li&gt;
&lt;li&gt;However, there are some tasks(e.g. few shot learning) that cannot achieve high performance with conventional methods.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New&lt;/strong&gt; supervised learning setup
&lt;ul&gt;
&lt;li&gt;Input-output setup:
&lt;ul&gt;
&lt;li&gt;With i.i.d. samples  of collections of images and their associated label similarity&lt;/li&gt;
&lt;li&gt;cf) conventional setup: i.i.d. samples of images and their associated labels&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authors&amp;rsquo; model can be extended to semi-supervised and active learning
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Semi-supervised learning:&lt;/p&gt;
&lt;p&gt;Learning from a mixture of labeled and unlabeled examples&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled2.png&#34;
	width=&#34;1024&#34;
	height=&#34;428&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled2_huc1bfe4fa7e46f3525a992e0a384e32c8_196077_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled2_huc1bfe4fa7e46f3525a992e0a384e32c8_196077_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://blog.est.ai/2020/11/ssl/&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;239&#34;
		data-flex-basis=&#34;574px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Active learning:&lt;/p&gt;
&lt;p&gt;The learner has the option to request those missing labels that will be most helpful for the prediction task&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled3.png&#34;
	width=&#34;1704&#34;
	height=&#34;610&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled3_huc6f63af45ed0ccc0628e36f08d894c39_473048_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled3_huc6f63af45ed0ccc0628e36f08d894c39_473048_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ICML 2019 active learning tutorial&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled4.png&#34;
	width=&#34;1024&#34;
	height=&#34;428&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled4_hu29a98bb38a9c671de7bd69329e42d18f_525600_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled4_hu29a98bb38a9c671de7bd69329e42d18f_525600_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Annotated by JH Gu&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;239&#34;
		data-flex-basis=&#34;574px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;closely-related-works-and-ideas&#34;&gt;Closely related works and ideas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Research article] Matching Networks for One shot learning - Vinyals et al.(2016)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mapped support set of images into the desired label.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And developed an end-to-end trainable k-nearest neighbors, accepting those support sets as input via attention LSTM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled5.png&#34;
	width=&#34;2610&#34;
	height=&#34;1132&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled5_hu0e12fc917e2d1e75fc1d11c369c80fd5_198931_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled5_hu0e12fc917e2d1e75fc1d11c369c80fd5_198931_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Vinyals et al.(2016), cited over 3000 times&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;553px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled6.png&#34;
	width=&#34;1722&#34;
	height=&#34;1194&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled6_hu682bd0f012da9d625d12e31d1ed30fa9_900563_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled6_hu682bd0f012da9d625d12e31d1ed30fa9_900563_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;346px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled7.png&#34;
	width=&#34;2114&#34;
	height=&#34;786&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled7_huc8e7223a5841039c99c90f590a76f75b_236044_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled7_huc8e7223a5841039c99c90f590a76f75b_236044_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;645px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$k$: number of data in support set&lt;/li&gt;
&lt;li&gt;$\hat{x}$: new data&lt;/li&gt;
&lt;li&gt;$\hat{y}$: its class&lt;/li&gt;
&lt;li&gt;$\hat{y}$ is a linear combination of the labels in the support set&lt;/li&gt;
&lt;li&gt;$a$: attention mechanism, which is a kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Research article] Prototypical Networks for Few-shot Learning - Snell et al.(2017)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled8.png&#34;
	width=&#34;1096&#34;
	height=&#34;320&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled8_hu673a9f33c51a89e6c015e050431013a1_40631_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled8_hu673a9f33c51a89e6c015e050431013a1_40631_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;342&#34;
		data-flex-basis=&#34;822px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.kakaocdn.net/dn/QTf75/btqV2blwJop/GPGDedaSftJNpHDXvq2XGk/img.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://blog.kakaocdn.net/dn/QTf75/btqV2blwJop/GPGDedaSftJNpHDXvq2XGk/img.gif&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Authors point out the overfitting problem of Matching networks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prototype: Center(mean) of each class cluster&lt;/li&gt;
&lt;li&gt;Similarity: $-\text{Euclidean distance}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Review article] Geometric deep learning - Bronstein et al.(2017)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled9.png&#34;
	width=&#34;3380&#34;
	height=&#34;760&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled9_huce1372555d0695877b90856ae5320997_165518_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled9_huce1372555d0695877b90856ae5320997_165518_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;444&#34;
		data-flex-basis=&#34;1067px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Geometric deep learning is an umbrella term for emerging techniques attempting to generalize deep models to non-Euclidian domains such as graphs and manifolds&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Research article] Message passing - Gilmer et al.(2017)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled10.png&#34;
	width=&#34;3232&#34;
	height=&#34;614&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled10_hu1eef0041f9c47cde680bf6ae160fab5e_104258_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled10_hu1eef0041f9c47cde680bf6ae160fab5e_104258_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;526&#34;
		data-flex-basis=&#34;1263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;$$
m^{t+1}_v = \sum_{w \in N(v)} M_t(h^t_v, h^t_w, e_{vw}) \ h^{t+1}_v = U_t(h^t_v, m^{t+1}_v )
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$M_t$: message functions&lt;/li&gt;
&lt;li&gt;$U_t$: vertex update functions&lt;/li&gt;
&lt;li&gt;$h^t_v$: hidden states of node $v$ in the graph at time $t$&lt;/li&gt;
&lt;li&gt;$m^{t+1}_v$: messages of node $v$ in the graph at time $t+1$&lt;/li&gt;
&lt;li&gt;$N(v)$: neighbors of node $v$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*oSQyFjtUkI7_u7lJXWU68Q.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GIF from https://towardsdatascience.com/introduction-to-message-passing-neural-networks-e670dc103a87&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set-up&#34;&gt;Problem set-up&lt;/h2&gt;
&lt;p&gt;Authors view the task as a supervised interpolation problem on a graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nodes: &lt;strong&gt;Images&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Edges: &lt;strong&gt;Similarity kernels →&lt;/strong&gt; &lt;em&gt;TRAINABLE&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;general-set-up&#34;&gt;General set-up&lt;/h3&gt;
&lt;p&gt;Input-output pairs $(\mathcal{T}_i, Y_i)_i$ drawn from i.i.d. from a distribution $\mathcal{P}$ of partially labeled image collections&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled11.png&#34;
	width=&#34;4000&#34;
	height=&#34;423&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled11_hu5436287761932c1cedb9fbd5fa84a3d6_135160_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled11_hu5436287761932c1cedb9fbd5fa84a3d6_135160_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;945&#34;
		data-flex-basis=&#34;2269px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$s$: # labeled samples&lt;/li&gt;
&lt;li&gt;$r$: # unlabled samples&lt;/li&gt;
&lt;li&gt;$t$: # samples to classify&lt;/li&gt;
&lt;li&gt;$K$: # classes&lt;/li&gt;
&lt;li&gt;$\mathcal{P}_l(\mathbb{R}^N)$: class-specific image distribution over $\mathbb{R}^N$&lt;/li&gt;
&lt;li&gt;targets $Y_i$ are associated with $\bar{x}_1, &amp;hellip;, \bar{x}_t \in \mathcal{T}_i$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learning objective:&lt;/p&gt;
&lt;p&gt;$\min_\Theta \frac{1}{L} \sum_{i \leq L} \ell(\Phi(\mathcal{T}_i, \Theta), Y_i) + \mathcal{R}(\Theta)$&lt;/p&gt;
&lt;p&gt;($\mathcal{R}$ is the standard regularization objective)&lt;/p&gt;
&lt;h3 id=&#34;few-shot-learning-setting&#34;&gt;Few shot learning setting&lt;/h3&gt;
&lt;p&gt;$r=0, t=1, s=qK$   $\longrightarrow$   $q-\text{shot} , K-\text{way}$&lt;/p&gt;
&lt;h3 id=&#34;semi-supervised-learning-setting&#34;&gt;Semi-supervised learning setting&lt;/h3&gt;
&lt;p&gt;$r &amp;gt; 0, t=1$&lt;/p&gt;
&lt;p&gt;Model can use the auxiliary images(unlabeled set) ${ \tilde{x}_1, &amp;hellip;, \tilde{x}_r }$ to improve the prediction accuracy, by leveraging the fact that these samples are drawn from the common distributions.&lt;/p&gt;
&lt;h3 id=&#34;active-learning-setting&#34;&gt;Active learning setting&lt;/h3&gt;
&lt;p&gt;The learner has the ability to request labels from the auxiliary images ${\tilde{x}_1, &amp;hellip;, \tilde{x}_r}$.&lt;/p&gt;
&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled12.png&#34;
	width=&#34;1188&#34;
	height=&#34;900&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled12_hu518b9887168c60fff5bff4e932a1b548_336596_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled12_hu518b9887168c60fff5bff4e932a1b548_336596_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\phi(x)$: CNN&lt;/li&gt;
&lt;li&gt;$h(l)$: One-hot encoded label(for labeled set), or uniform distribution(for unlabeled set)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;set-and-graph-input-representations&#34;&gt;Set and Graph Input Representations&lt;/h3&gt;
&lt;p&gt;The goal of few shot learning:&lt;/p&gt;
&lt;p&gt;To propagate label information from labeled samples towards the unlabeled query image&lt;/p&gt;
&lt;p&gt;→ The propagation can be formalized as a posterior inference over a graphical model&lt;/p&gt;
&lt;p&gt;$G_\mathcal{T} = (V,E)$&lt;/p&gt;
&lt;p&gt;Similarity measure is not pre-specified, but learned!&lt;/p&gt;
&lt;p&gt;c.f.) in Siamese network, the similarity measure is fixed(L1 distance)!&lt;/p&gt;
&lt;p&gt;본 논문(Few shot learning with GNN)에 쓰인 문장 구조가 이상해서 헷갈리게 쓰여있음.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled13.png&#34;
	width=&#34;3024&#34;
	height=&#34;1004&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled13_hu195ce8430d176ca0bb51f3bd3cc2cd4a_386759_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled13_hu195ce8430d176ca0bb51f3bd3cc2cd4a_386759_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Koch et al.(2015), https://tyami.github.io/deep learning/Siamese-neural-networks/&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;722px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;graph-neural-networks&#34;&gt;Graph Neural Networks&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled14.png&#34;
	width=&#34;1982&#34;
	height=&#34;838&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled14_hu2b7b1594699112bb43a74ec4c994064f_379402_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled14_hu2b7b1594699112bb43a74ec4c994064f_379402_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We are given an input signal $F \in \mathbb{R}^{V \times d}$ on the vertices of a weighted graph $G$.&lt;/p&gt;
&lt;p&gt;Then we consider a family, or a set &amp;ldquo;$\mathcal{A}$&amp;rdquo; of graph intrinsic linear operators.&lt;/p&gt;
&lt;p&gt;$\mathcal{A} = {\tilde{A}^{(k)}, \mathbf{1}}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linear operator&lt;/p&gt;
&lt;p&gt;e.g.) Simplest linear operator is adjacency operator $A$, where $(AF)&lt;em&gt;i = \sum&lt;/em&gt;{j \sim i} w_{i,j}F_j$ ($w_{i,j}$ is associated weight)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GNN layer&lt;/p&gt;
&lt;p&gt;A GNN layer $\text{Gc}(\cdot)$ receives as input a signal $\mathbf{x}^{(k)} \in \mathbb{R}^{V\times d_k}$ and produces $\mathbf{x}^{(k+1)} \in \mathbb{R}^{V\times d_{k+1}}$&lt;/p&gt;
&lt;p&gt;$$
\mathbf{x}^{(k+1)} = \text{Gc}(\mathbf{x}^{(k)}) = \rho\Big(\sum_{B\in\mathcal{A}} B\mathbf{x}^{(k)}\theta^{(k)}_{B, l}\Big )
$$&lt;/p&gt;
&lt;p&gt;$\mathbf{x}^{(k)}$: representation vector of a certain node at time step $k$&lt;/p&gt;
&lt;p&gt;$\theta$: trainable parameters&lt;/p&gt;
&lt;p&gt;$\rho$: Leaky ReLU&lt;/p&gt;
&lt;p&gt;Construction of edge feature matrix, inspired by message passing algorithm&lt;/p&gt;
&lt;p&gt;$$
\tilde{A}^{(k)}_{i, j} = \varphi_{\tilde{\theta}}(\mathbf{x}^{(k)}_i, \mathbf{x}^{(k)}_j )
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\tilde{A}^{(k)}_{i, j}$: &lt;strong&gt;learned&lt;/strong&gt; edge features from the node&amp;rsquo;s current hidden representation(at time step $k$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\varphi$: a metric and a symmetric function parameterized with neural network&lt;/p&gt;
&lt;p&gt;$$
\varphi_{\tilde{\theta}}(\mathbf{x}^{(k)}_i, \mathbf{x}^{(k)}_j ) = \text{MLP}_{\tilde{\theta}}(abs(\mathbf{x}^{(k)}_i - \mathbf{x}^{(k)}_j))
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ $\tilde{A}^{(k)}$ is then normalized by row-wise softmax&lt;/p&gt;
&lt;p&gt;→ And added to the family $\mathcal{A} = {\tilde{A}^{(k)}, \mathbf{1}}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathbf{1}$: Identity matrix, which is the self-edge to aggregate vertex&amp;rsquo;s own features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Construction of initial node features&lt;/p&gt;
&lt;p&gt;$$
\mathbf{x}^{(0)}_i = (\phi(x_i), h(l_i))
$$&lt;/p&gt;
&lt;p&gt;$\phi$: convolutional neural network&lt;/p&gt;
&lt;p&gt;$h(l) \in \mathbb{R}^K_+$ : a one-hot encoding of the label&lt;/p&gt;
&lt;p&gt;For images with unknown label, $\tilde{x}_j$(unlabeled data) and  $\bar{x}_j$(test data), $h(l_j)$ is set with uniform distribution.&lt;/p&gt;
&lt;h2 id=&#34;training&#34;&gt;Training&lt;/h2&gt;
&lt;h3 id=&#34;few-shot-and-semi-supervised-learning&#34;&gt;Few-shot and Semi-supervised learning&lt;/h3&gt;
&lt;p&gt;The final layer of GNN is a softmax mapping. We then use cross-entropy loss:&lt;/p&gt;
&lt;p&gt;$$
\ell(\Phi(\mathcal{T}; \Theta), Y) = -\sum_k y_k \log P(Y_* = y_k , |, \mathcal{T})
$$&lt;/p&gt;
&lt;p&gt;The semi-supervised setting is trained identically, but the initial label fields of $\tilde{x}_j$s will be filled with uniform distribution.&lt;/p&gt;
&lt;h3 id=&#34;active-learning-with-attention&#34;&gt;Active learning (with attention)&lt;/h3&gt;
&lt;p&gt;In active learning, the model has the intrinsic ability to query for one of the labels from ${ \tilde{x}_1, &amp;hellip;, \tilde{x}_r }$.&lt;/p&gt;
&lt;p&gt;The network will learn to ask for the most informative label to classify the sample $\bar{x}$.&lt;/p&gt;
&lt;p&gt;The querying is done after the first layer of GNN by using a softmax attention over the unlabeled nodes of the graph.&lt;/p&gt;
&lt;p&gt;Attention&lt;/p&gt;
&lt;p&gt;We apply a function $g(\mathbf{x}^{(1)}_i) \in \mathbb{R}^1$ that maps each unlabeld vector node to a scalar value.&lt;/p&gt;
&lt;p&gt;A softmax is applied over the ${1, &amp;hellip;, r}$ scalar values obtained after applying $g$:&lt;/p&gt;
&lt;p&gt;$r$: # unlabeled samples&lt;/p&gt;
&lt;p&gt;$$
\text{Attention} = \text{Softmax}(g(\mathbf{x}^{(1)}_{{1,&amp;hellip;,r}}))
$$&lt;/p&gt;
&lt;p&gt;To query only one sample we set all elements to zero except for one. → $\text{Attention}&#39;$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At training, model randomly samples one value based on its multinomial probability.&lt;/li&gt;
&lt;li&gt;At test, model just keeps the maximum value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we multiply this with the label vectors&lt;/p&gt;
&lt;p&gt;$$
w \cdot h(l_{i*}) = \langle \text{Attention}&amp;rsquo;, h(l_{{1, &amp;hellip;, r}}) \rangle
$$&lt;/p&gt;
&lt;p&gt;($w$ is scaling factor)&lt;/p&gt;
&lt;p&gt;This value is then summed to the current representation.&lt;/p&gt;
&lt;p&gt;$$
\mathbf{x}^{(1)}_{i*} = [\text{Gc}(\mathbf{x}^{(0)}_{i*}), \mathbf{x}^{(0)}_{i*}] = [\text{Gc}(\mathbf{x}^{(0)}_{i*}), (\phi(x_{i*}), h(l_{i*}))]
$$&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;h3 id=&#34;few-shot-learning&#34;&gt;Few-shot learning&lt;/h3&gt;
&lt;p&gt;Omniglot&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled15.png&#34;
	width=&#34;1744&#34;
	height=&#34;720&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled15_hud1dea68979c0bbf767eb191d1fd1d37e_221954_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled15_hud1dea68979c0bbf767eb191d1fd1d37e_221954_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;242&#34;
		data-flex-basis=&#34;581px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;# of parameters: $\sim5\text{M} (\text{TCML})$, $\sim300 \text{K}(3 \text{layers GNN})$&lt;/p&gt;
&lt;p&gt;Omniglot: 1,623 characters  X 20 examples for each characters&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled16.png&#34;
	width=&#34;2170&#34;
	height=&#34;945&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled16_hu734905f970a0a113fc187b3c1a108a68_954773_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled16_hu734905f970a0a113fc187b3c1a108a68_954773_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Omniglot&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Mini-ImageNet: Originally introduced by Vinyals et al.(2016)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled17.png&#34;
	width=&#34;1628&#34;
	height=&#34;584&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled17_hu78e7bfaf35d1da92942e4f4a1fe7dadb_170810_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled17_hu78e7bfaf35d1da92942e4f4a1fe7dadb_170810_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;278&#34;
		data-flex-basis=&#34;669px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;# of parameters: $\sim 11\text{M} (\text{TCML})$, $\sim 400 \text{K}(3 \text{ layers GNN})$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled18.png&#34;
	width=&#34;795&#34;
	height=&#34;400&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled18_hu379e1637ed83ad26af73f3539cf37e81_707619_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled18_hu379e1637ed83ad26af73f3539cf37e81_707619_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Mini-ImageNet&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;477px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Mini-ImageNet&lt;/p&gt;
&lt;p&gt;Divided into 64 training, 16 validation, 20 testing classes each containing 600 examples.&lt;/p&gt;
&lt;h3 id=&#34;semi-supervised-learning&#34;&gt;Semi-supervised learning&lt;/h3&gt;
&lt;p&gt;Omniglot&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled19.png&#34;
	width=&#34;1444&#34;
	height=&#34;304&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled19_hu21116ea201fb3837edc6f9ad35132df9_60736_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled19_hu21116ea201fb3837edc6f9ad35132df9_60736_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;475&#34;
		data-flex-basis=&#34;1140px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Mini-ImageNet&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled20.png&#34;
	width=&#34;1666&#34;
	height=&#34;342&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled20_hu1158a4c24840395ac6dcb63f5d7034ea_78788_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled20_hu1158a4c24840395ac6dcb63f5d7034ea_78788_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;487&#34;
		data-flex-basis=&#34;1169px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;active-learning&#34;&gt;Active learning&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled21.png&#34;
	width=&#34;1676&#34;
	height=&#34;444&#34;
	srcset=&#34;https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled21_hu57c3addab4b9d756f0d1227c98fe6ef2_119500_480x0_resize_box_3.png 480w, https://gujh14.github.io/p/few-shot-learning-with-graph-neural-networks/Untitled21_hu57c3addab4b9d756f0d1227c98fe6ef2_119500_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;377&#34;
		data-flex-basis=&#34;905px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Random: Network chooses a random sample to be labeled, instead of one that maximally reduces the loss of the classification task $\mathcal{T}$&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
</description>
        </item>
        
    </channel>
</rss>
